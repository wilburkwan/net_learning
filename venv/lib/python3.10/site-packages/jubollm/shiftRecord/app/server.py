import os
import yaml
import datetime
import uvicorn

from typing import Dict, List, Union
from fastapi import FastAPI, responses
from pydantic import BaseModel

from linkinpark.lib.common.fastapi_middleware import FastAPIMiddleware
from jubollm.shiftRecord.lib.service import ShiftRecordService
from jubollm.common.utils import load_yaml_with_environment


APP_ENV = os.environ.get("APP_ENV", "dev")
SERVER_INIT_CONFIG_FILE = "config/server_init_local.yaml"

app = FastAPI(
    title="Generate shift record from caring data",
    description=open(
        os.path.join(os.path.dirname(
            os.path.abspath(__file__)), "README.md"), "r"
    ).read(),
    version="1.0.0",
)
app.add_middleware(FastAPIMiddleware, path_prefix="/ai-llm-agent-shiftrecord")

config_path = os.path.join(os.path.dirname(os.path.dirname(
    os.path.abspath(__file__))), SERVER_INIT_CONFIG_FILE)
server_init_config = load_yaml_with_environment(
    config_path, {'APP_ENV': APP_ENV})
SERVICE = ShiftRecordService(
    llm_config=server_init_config
)


class Record(BaseModel):
    記錄內容: str
    記錄時間: str
    類別: str


class FamilyAction(BaseModel):
    互動時間: str
    互動內容: str
    互動目的: Union[str, None]
    互動目的其他: Union[str, None]
    對象回饋: Union[str, None]
    最後決議: Union[str, None]


class PatientInput(BaseModel):
    patient: str
    organization: str
    date: str
    data: Dict[str, Union[str, List[Record], List[FamilyAction]]]


@app.get("/ai-llm-agent-shiftrecord/")
async def root():
    return responses.RedirectResponse("/docs")


@app.post("/ai-llm-agent-shiftrecord/generate")
def generate_message(service_input: PatientInput):
    outputs = SERVICE.generate_request(service_input)

    return outputs


def main():
    uvicorn.run("jubollm.shiftRecord.app.server:app",
                host="0.0.0.0", port=5000, proxy_headers=True)


if __name__ == '__main__':
    main()
