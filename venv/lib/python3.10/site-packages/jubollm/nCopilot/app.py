import uvicorn
from fastapi import FastAPI, Depends, Form
from fastapi.middleware.cors import CORSMiddleware

from jubollm.common.utils import load_yaml_with_environment
from jubollm.nCopilot.generator.nis_args_generator import NisArgsGenerator
from jubollm.nCopilot.generator.caring_args_generator import CaringArgsGenerator
from jubollm.nCopilot.generator.nis_response_generator import NisResponseGenerator
from jubollm.nCopilot.generator.caring_response_generator import CaringResponseGenerator
from jubollm.nCopilot.searcher.patient_searcher import PatientSearcher
from jubollm.nCopilot.searcher.qdrant_searcher import QdrantSearcher
from jubollm.nCopilot.searcher.mongo_collection_searcher import MongoCollectionSearcher
from jubollm.nCopilot.executor.caring_executor import CaringExecutor
from jubollm.nCopilot.executor.nis_query_executor import NisQueryExecutor
from jubollm.nCopilot.auth0.auth_manager import AuthManager
from jubollm.nCopilot.auth0.models import TokenData
from jubollm.nCopilot.auth0.utils import get_token_data
import time

app = FastAPI()

origins = [
    "http://localhost:3000",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,  # Allow only specified origins
    allow_credentials=True,
    allow_methods=["*"],  # Allow all methods
    allow_headers=["*"],  # Allow all headers
)


DB_NAME = "Oswin-test"
token = 'dummy_token'
server_init_config = load_yaml_with_environment('jubollm/nCopilot/generator/config/server_init_gemini.yaml', {'APP_ENV': 'dev'})


@app.post("/ai-llm-agent-ncopilot/caring")
def caring_copilot(user_input: str = Form(...), token_data: TokenData = Depends(get_token_data)):
    # send user input to llm, encode to vector
    qdrant_searcher = QdrantSearcher(db="http://34.80.64.202:6333")
    vector = qdrant_searcher.encode_txt_to_vector(user_input)
    
    # send vector to qdrant
    collection_name, columns_description = qdrant_searcher.get_table_columns_from_qdrant(vector)
    print(f"collection name: {collection_name}\ncolumns: {columns_description}")

    # generate json shema
    args_generator = CaringArgsGenerator(server_init_config)
    json_schema = args_generator.generate_json(user_input, collection_name, columns_description)

    # send json schema to exectuor
    executor = CaringExecutor(json_schema)
    query_result = executor.execute()
    
    # generate reponse
    response_generator = CaringResponseGenerator(server_init_config)
    response = response_generator.generate_response(user_input, query_result, collection_name)

    return response


@app.post("/ai-llm-agent-ncopilot/nisOrgChat")
def nis_copilot_orgchat(user_input: str = Form(...), token_data: TokenData = Depends(get_token_data)):
    # search collection name
    collection_name = MongoCollectionSearcher().search(user_input)

    # generate json schema
    args_generator = NisArgsGenerator(server_init_config)
    json_schema = args_generator.generate_json(user_input, collection_name)

    # get patient id and organization
    patient_searcher = PatientSearcher()
    patient_id_str = patient_searcher.find_patient(json_schema.get("patientName"))
    patient_organization_str = patient_searcher.find_organization(patient_id_str)

    # check auth
    auth_manager = AuthManager(token_data)
    auth_manager.check_metadata(patient_id_str, patient_organization_str)

    # send json schema to executor
    executor = NisQueryExecutor(json_schema)
    query_result = executor.execute(collection_name, patient_id_str)

    # generate response
    response_generator = NisResponseGenerator(server_init_config)
    response = response_generator.generate_response(user_input, query_result, collection_name)
    return response


# @app.post("/ai-llm-agent-ncopilot/nisFamilyChat")
# def nis_copilot_familychat(user_input: str = Form(...), token_data: TokenData = Depends(get_token_data)):


if __name__ == '__main__':
    uvicorn.run("jubollm.nCopilot.app:app", host="0.0.0.0", port=5000, proxy_headers=True)