import logging
from bson import ObjectId
from linkinpark.lib.common.mongo_connector import MongodbReadOnly

from jubollm.nCopilot.searcher.base_searcher import BaseSearcher


class PatientSearcher(BaseSearcher):
    def __init__(self):
        super().__init__(db=MongodbReadOnly(env="dev"))

    def find_patient(self, patient_name):
        last_name = patient_name[0]
        first_name = patient_name[1:]

        query = {
            "lastName": last_name,
            "firstName": first_name
        }

        # Search the database for the patient
        result = self.db['patients'].find_one(query, {"_id": 1})  # Only retrieve the patient ID

        if result:
            patient_id = str(result['_id'])
            logging.info(f"Found patient with ID: {patient_id}")
            return patient_id
        else:
            logging.warning(f"No patient found with name: {patient_name}")
            return None

    def find_organization(self, patient_id_str):
        patient_id = ObjectId(patient_id_str)

        # Retrieve patient data from the database
        result = self.db['patients'].find_one({"_id": patient_id}, {"organization": 1, "_id": 0})

        if result and 'organization' in result and isinstance(result['organization'], ObjectId):
            result['organization'] = str(result['organization'])

        patient_organization_str = str(result.get('organization', ''))
        logging.info(f"Found patient organization string: {patient_organization_str}")

        return patient_organization_str