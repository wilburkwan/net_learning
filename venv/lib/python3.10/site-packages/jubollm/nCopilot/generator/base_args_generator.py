import json
from jubollm.base_generator import BaseGenerator


class BaseArgsGenerator(BaseGenerator):
    def __init__(self, llm_config):
        super().__init__(**llm_config)

    def _construct_patch_mappings(self, user_input, collection_name, columns_description=None):
        """Constructs patch mappings specific to the generator type.
        
        This method must be implemented by subclasses.
        """
        raise NotImplementedError("Subclasses must implement this method.")

    def generate_json(self, user_input, collection_name, columns_description=None, retries=6):
        patch_mappings = self._construct_patch_mappings(user_input, collection_name, columns_description)

        for attempt in range(retries):
            try:
                json_schema = self.generate(**patch_mappings)
                json_start_index = json_schema.find('{')
                if json_start_index != -1:
                    json_schema = json_schema[json_start_index:]

                # 去除結尾的 `}`
                json_end_index = json_schema.rfind('}') + 1
                if json_end_index != -1:
                    json_schema = json_schema[:json_end_index]

                json_schema = json.loads(json_schema)
                print(f"JSON schema generated by LLM:\n{json.dumps(json_schema, indent=2, ensure_ascii=False)}")
                return json_schema

            except json.JSONDecodeError as e:
                print(f"Attempt {attempt + 1} failed: The generated schema is not in valid JSON format.\n{json_schema}")
                if attempt == retries - 1:
                    raise ValueError(f"Failed to generate valid JSON schema after {retries} attempts.")
            except Exception as e:
                print(f"Attempt {attempt + 1} encountered an error: {e}")
                if attempt == retries - 1:
                    raise
