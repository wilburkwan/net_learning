import logging
from fastapi import HTTPException

from jubollm.nCopilot.auth0.models import TokenData


class AuthManager:
    def __init__(self, token_data: TokenData):
        self.token_data = token_data

    def check_organization_permission(self, patient_organization_str: str):
        if not self.token_data or not self.token_data.app_metadata:
            raise HTTPException(status_code=403, detail="你根本沒有 metadata")

        user_organization = self.token_data.app_metadata.get('organization')
        if not user_organization or user_organization != patient_organization_str:
            raise HTTPException(status_code=403, detail="走開: 機構錯誤")

        logging.info(f"給過 機構存取～: {user_organization}")

    def check_patient_id_permission(self, patient_id_str: str):
        if not self.token_data or not self.token_data.app_metadata:
            raise HTTPException(status_code=403, detail="你根本沒有 metadata")

        user_patient_id = self.token_data.app_metadata.get('patient_id')
        if not user_patient_id or user_patient_id != patient_id_str:
            raise HTTPException(status_code=403, detail="走開: 並非家屬")

        logging.info(f"給過 家屬存取～: {user_patient_id}")

    def check_metadata(self, patient_id_str, patient_organization_str):
        try:
            # Check organization
            self.check_organization_permission(patient_organization_str)
        except HTTPException as e:
            if e.status_code == 403:
                try:
                    # Check patient ID permission
                    self.check_patient_id_permission(patient_id_str)
                except HTTPException as e:
                    if e.status_code == 403:
                        raise HTTPException(status_code=403, detail="根本沒存取權拍謝")
                    else:
                        logging.error(f"Unexpected error: {e.status_code}")
                        raise e
            else:
                logging.error(f"Unexpected error: {e.status_code}")
                raise e
