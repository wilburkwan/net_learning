import pyodbc
from datetime import datetime, timedelta

from jubollm.nCopilot.executor.base_executor import BaseExecutor


class CaringExecutor(BaseExecutor):
    def __init__(self, json_schema):
        table = json_schema["table"]
        columns = json_schema["columns"]
        conditions = json_schema["conditions"]
        name = json_schema["name"]

        super().__init__(table, columns, conditions, name)
        self.connection = None
        self.cursor = self._connect_db()

    def _connect_db(self):
        server = '35.201.182.10,65500'
        database = 'AI_TEST'
        username = 'care_admin'
        password = '19021129'
        
        connection_string = f'DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={server};DATABASE={database};UID={username};PWD={password}'
        
        try:
            self.connection = pyodbc.connect(connection_string)
            print("Connection successful!")
            return self.connection.cursor()
        except Exception as e:
            print(f"Connection failed: {e}")
            return None

    def execute(self):
        if not self.cursor:
            print("No database connection.")
            return None
        
        # Construct the SQL query
        columns = ", ".join(self.columns) if self.columns else "*"
        limit_clause = ""
        
        if 'limit' in self.conditions:
            limit = self.conditions['limit']
            if isinstance(limit, int):
                limit = 10 if limit > 10 else limit
                limit_clause = f"TOP {limit} "

        query = f"SELECT {limit_clause}{columns} FROM {self.table}"
        
        # Add conditions to the query
        where_clauses = []
        sort_clause = ""

        if 'duration' in self.conditions:
            duration = self.conditions['duration']
            if 'column' in duration and 'days' in duration:
                days = int(duration['days'])
                end_time = datetime.now()
                start_time = end_time - timedelta(days=days)
                where_clauses.append(f"{duration['column']} BETWEEN '{start_time.strftime('%Y-%m-%d %H:%M:%S')}' AND '{end_time.strftime('%Y-%m-%d %H:%M:%S')}'")
        
        if 'sortby' in self.conditions:
            sortby = self.conditions['sortby']
            if 'column' in sortby and 'method' in sortby:
                sort_clause = f"ORDER BY {sortby['column']} {sortby['method']}"
        
        if where_clauses:
            query += " WHERE " + " AND ".join(where_clauses)
        if sort_clause:
            query += " " + sort_clause

        print(f"Executing query: {query}")
        try:
            self.cursor.execute(query)
            results = self.cursor.fetchall()
            return results
        except Exception as e:
            print(f"Query execution failed: {e}")
            return None