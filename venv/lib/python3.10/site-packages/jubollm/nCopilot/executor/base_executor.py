"""
Input: json schema parsed by llm
{
    "organization": string,
    "table": string,
    "columns": [],
    "conditions": {
        "duration": {
            "column": string,
            "days": int,
        },
        "sortby": {
            "column": string,
            "method": "ASC" or "DESC"
        },
        "limit": int
    },
    "name": string,
}

Output: intertface object
"""


class BaseExecutor:
    """
    Base class for executing database queries.

    Attributes:
        table (str): Name of the table to query.
        columns (list): List of columns to retrieve.
        conditions (dict): Conditions for the query.
        name (str): Name of the executor.
    """
    def __init__(self, table, columns, conditions, name):
        self.table = table
        self.columns = columns
        self.conditions = conditions
        self.name = name

    def _connect_db(self):
        """
        Connect to the database.
        To be implemented by subclasses.
        """
        raise NotImplementedError("Subclasses should implement this method")

    def execute(self):
        """
        Execute the database query.
        To be implemented by subclasses.
        """
        raise NotImplementedError("Subclasses should implement this method")

