import os
import pandas as pd
from bson import ObjectId
from datetime import timedelta

from linkinpark.lib.common.mongo_connector import MongodbReadOnly


MONGO_ENV = os.environ.get("MONGO_ENV", "dev")


def query_label(org_id):
    db = MongodbReadOnly(env=MONGO_ENV)
    modulesettings = db['modulesettings']
    df_modulesettings = pd.DataFrame(
        modulesettings.find({
            'organization': ObjectId(org_id),
            'name': 'careDiaryv2',
        }))
    if df_modulesettings.empty:
        # query carediaries if carediaryv2 not found
        output_dict = {'activity': ['individualActivity', 'individualActivityNote', 'individualActivityNote'],
                       'intake': ['intakeStatus', 'intakeDevice', 'lunchAte', 'drinkingStatus',
                                  'drinkingAmount', 'dessertType', 'dessertAte'],
                       'status': ['moringMentalStatus', 'morningEmotionResponse', 'afternoonMentalStatus',
                                  'afternoonEmotionResponse', 'mentalNote'],
                       'stool': ['didUrinated', 'defecationStatus', 'didDefecated', 'clothChanging',
                                 'stoolType', 'defecationAmount'],
                       'medication': ['medicineNote']
                       }
        return {"output_dict": output_dict, "schema": "carediaries"}

    pageid = str(df_modulesettings.iloc[0]['pages'][0])
    pages = db['pages']
    df_pages = pd.DataFrame(
        pages.find({
            '_id': ObjectId(pageid)},
            {'key': 1,
             'fields': 1,
             'label': 1}
        ))
    fields = df_pages.iloc[0]['fields']

    label2keyword = {
        'activity': ['活動'],
        'intake': ['飲水', '進食'],
        'status': ['狀態', '備註'],
        'stool': ['排尿', '排便', '衛生'],
        'medication': ['服藥']
    }
    keyword2label = {v: k for k, vs in label2keyword.items() for v in vs}

    output_dict = {
        "activity": [],
        "intake": [],
        "status": [],
        "stool": [],
        "medication": []
    }
    for item in fields:
        for keyword in keyword2label:
            if keyword in item['label']:
                for component in item['contents']:
                    if 'key' in component:
                        output_dict[keyword2label[keyword]].append(
                            component['key'])

    return {"output_dict": output_dict, "schema": "carediaryv2"}


def query_data(patient_id, org_id, date):
    """
    Returns two dicts:
        patient_data - patient data for orgMessage of that day
        patient_demogr - patient's basic demographic info (like sex, age, etc.)
    """
    label_dict = query_label(org_id)
    db = MongodbReadOnly(env=MONGO_ENV)
    carediary = db[label_dict['schema']]

    query = {
        'patient': ObjectId(patient_id),
        'date': {"$gte": date, "$lt": date + timedelta(days=1)}
    }
    df_carediary = pd.DataFrame(carediary.find(query))
    last_carediary = df_carediary.iloc[-1]

    patient_data = {}
    for label, components in label_dict['output_dict'].items():
        temp_dict = {}
        for com in components:
            temp_dict[com] = last_carediary[com] if com in last_carediary else None
        patient_data[label] = temp_dict
    patient_db = db['patients'].find_one({'_id': ObjectId(patient_id)})
    patient_age = date.year - patient_db['birthday'].year
    patient_demogr = {
        'sex': patient_db['sex'], 'age': patient_age, 'firstname': patient_db['firstName']}

    output_dict = {
        'patient_data': patient_data,
        'patient_demogr': patient_demogr
    }

    return output_dict
