import os
import yaml
import datetime
import uvicorn

from typing import List
from fastapi import FastAPI, responses
from pydantic import BaseModel

from linkinpark.lib.common.fastapi_middleware import FastAPIMiddleware
from jubollm.orgMessage.lib.service import OrgMessageService
from jubollm.common.utils import load_yaml_with_environment


APP_ENV = os.environ.get("APP_ENV", "dev")
SERVER_INIT_CONFIG_FILE = "config/server_init_local.yaml"

app = FastAPI(
    title="Generate org message, summarized from communication book data",
    description=open(
        os.path.join(os.path.dirname(
            os.path.abspath(__file__)), "README.md"), "r"
    ).read(),
    version="1.0.0",
)
app.add_middleware(FastAPIMiddleware, path_prefix="/ai-llm-agent-orgmessage")

config_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), SERVER_INIT_CONFIG_FILE)
server_init_config = load_yaml_with_environment(config_path, {'APP_ENV': APP_ENV})
SERVICE = OrgMessageService(
    llm_config=server_init_config
)


class PatientInput(BaseModel):
    patient: str
    organization: str
    date: datetime.datetime
    category: List[str]


class ServiceInput(BaseModel):
    inputs: List[PatientInput]


@app.get("/ai-llm-agent-orgmessage/")
async def root():
    return responses.RedirectResponse("/docs")


@app.post("/ai-llm-agent-orgmessage/generate")
def generate_message(service_input: ServiceInput):
    outputs = []
    inputs = service_input.inputs
    # possibly multiple patient inputs
    for patient_input in inputs:
        patient_record = SERVICE.generate_request(patient_input)
        outputs.append(patient_record)

    return outputs


def main():
    uvicorn.run("jubollm.orgMessage.app.server:app",
                host="0.0.0.0", port=5000, proxy_headers=True)


if __name__ == '__main__':
    main()
